<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ninja_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.1;
maxSpeed = 1;

hurt = 0;
hp = 1;
healthColor = c_red; //Health flashes white when hit
hudSpeed = 0;
face = 1;

canAttack = 1;
attackCount = 0;
attackType = round(random(1));

move = 0;

pool = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var acc;
acc = 2 - hurt;

if (canAttack) {
    move = 0;
    if (keyboard_check_pressed(ord('Z')) &amp;&amp; !hurt) {
        move = 2;
        canAttack = 0;
        attackType = round(random(1));
        
        o = instance_create(x + 8*face, y, obj_slice);
        o.image_xscale = 1.5*face;
        o.image_yscale = 1.5;
        o.image_single = attackType;
    }
    else if (keyboard_check_pressed(ord('X'))) {
        face = -face;
    }
    else {
        if (keyboard_check(vk_up)) {
            move = 1;
            y -= acc;
        }
        
        if (keyboard_check(vk_down)) {
            move = 1;
            y += acc;
        }
        
        if (keyboard_check(vk_left)) {
            move = 1;
            x -= acc;
        }
        
        if (keyboard_check(vk_right)) {
            move = 1;
            x += acc;
        }
    }
}
else {
    switch(move) {
        case 4:
            if (attackCount &lt; image_number - 1) {
                attackCount += 0.25;
                image_index = attackCount;
            }
        break;
        case 3:
            if (attackCount &lt; image_number - 1) {
                attackCount += 0.5;
                image_index = attackCount;
            }
            else {
                attackCount = 0;
                canAttack = 1;
                face = -face;
                move = 0;
            }   
        break;
        case 2:
            attackCount += 1;
            image_index = attackCount + attackType * 4;
            if (attackCount &gt; 3) {
                attackCount = 0;
                canAttack = 1;
            }
        break;
    }
}

switch(move) {
    case 4:
        image_speed = 0;
        if (sprite_index != spr_ninja_die) sprite_index = spr_ninja_die;
    break;
    case 3:
    //IGNORE THIS ATM
        image_speed = 0;
        if (sprite_index != spr_ninja_turn) sprite_index = spr_ninja_turn;
    break;
    case 2:
        image_speed = 0;
        if (sprite_index != spr_ninja_attack) sprite_index = spr_ninja_attack;
    break;
    case 1:
        if (hurt) {
            image_speed = 0.25;
            if (sprite_index != spr_ninja_limp) sprite_index = spr_ninja_limp;
        }
        else {
            image_speed = 0.5;
            if (sprite_index != spr_ninja_walk) sprite_index = spr_ninja_walk;
        }
    break;
    case 0:
        if (hurt) {
            image_speed = 0.05;
            if (sprite_index != spr_ninja_injured) sprite_index = spr_ninja_injured;
        }
        else {
            image_speed = 0.2;
            if (sprite_index != spr_ninja_stand) sprite_index = spr_ninja_stand;
        }
    break;
}

if (hurt) {
    healthColor = c_white;
    if (hp &gt; 0) hp -= 0.005;
    else {
        move = 4;
        canAttack = 0;
        hp = 0;
    }
    
    if (move == 0 || move == 4) {
        if (pool &lt; 10) pool += 0.05;
    }
    else pool = 0;
    
    var canBleed;
    canBleed = random(1);
    if (canBleed &gt; 0.60 &amp;&amp; pool &lt; 10) tile_add(bkg_blood, irandom(3)*16, irandom(1)*16, 16, 16, x - 8 + pool*(1 - random(2)), y - 3 + pool*(1 - random(2))/2, 1000001);
}
else {
    healthColor = c_red;
    if (hp &lt; 1) hp += (1-hp)/10 + 0.001;
    else hp = 1;
}

/*
var acc;
acc = 0.2;

if (speed &gt; 0.1) {
    motion_add(direction + 180, speed/10);
    image_speed = 0.2;
    if (sprite_index != spr_ninja_walk) sprite_index = spr_ninja_walk;
}
else {
    speed = 0;
    image_speed = 0.075;
    if (sprite_index != spr_ninja_stand) sprite_index = spr_ninja_stand;
}

if (keyboard_check(vk_up)) motion_add(90, acc);
if (keyboard_check(vk_down)) motion_add(270, acc);
if (keyboard_check(vk_left)) motion_add(180, acc);
if (keyboard_check(vk_right)) motion_add(0, acc);

if (speed &gt; maxSpeed) speed = maxSpeed;
*/

//debug
if (keyboard_check(vk_escape)) game_end();
if (keyboard_check(ord('R'))) game_restart();

if (keyboard_check_pressed(ord('Q'))) hurt = 1 - hurt;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_slice">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.type &amp;&amp; abs(y-other.y) &lt; 8) hurt = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_alpha(0.5);
draw_set_color(c_white);
draw_ellipse(x - 8 - 1, y + 8 - 3, x + 8 - 1, y + 8 + 3, 0);
draw_set_color(c_red);
draw_ellipse(x - 8 + 1 - 1, y + 8 - 3 + 1, x + 8 - 1 - 1, y + 8 + 3 - 1, 0);
*/

draw_set_alpha(1);

var canFlash;
canFlash = random(1);
if (hurt &amp;&amp; hp &gt; 0 &amp;&amp; canFlash &gt; 0.9) {
    d3d_set_fog(1, c_red, 0, 0);
}

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale * face, image_yscale, image_angle, image_blend, image_alpha);

d3d_set_fog(0, c_black, 0, 0);

draw_set_alpha(1 - obj_controller.titleAlpha);
//Health Background
draw_set_color(c_black);
draw_rectangle(view_xview + 4 + 32 - 8, view_yview + view_hview - 4 - 8, view_xview + view_wview - 4 - 8, view_yview + view_hview - 12 - 8, 0);

//Health Bar
draw_set_color(healthColor);
if (hp &gt; 0) draw_rectangle(view_xview + 4 + 32 - 8, view_yview + view_hview - 4 - 8, view_xview + 4 + 32 - 8 + (view_wview - 4 - 32 - 4)*hp, view_yview + view_hview - 12 - 8, 0);

//Health Border
draw_set_color(c_white);
draw_rectangle(view_xview + 3 + 32 - 8, view_yview + view_hview - 4 - 8, view_xview + view_wview - 4 - 8, view_yview + view_hview - 13 - 8, 1);

if (hp &gt; 0) hudSpeed += 0.2 - 0.15*hurt;
else hudSpeed = attackCount;

var spr;
if (hurt) {
    if (hp &gt; 0) spr = spr_ninja_injured;
    else spr = spr_ninja_die;
}
else spr = spr_ninja_stand; 
draw_sprite_ext(spr, hudSpeed, view_xview + 24, view_yview + view_hview - 32, 3 * face, 3, image_angle, image_blend, 1 - obj_controller.titleAlpha);

depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
